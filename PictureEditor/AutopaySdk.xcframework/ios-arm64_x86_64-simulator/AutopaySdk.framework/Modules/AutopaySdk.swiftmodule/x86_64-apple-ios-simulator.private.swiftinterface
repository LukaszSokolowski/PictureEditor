// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target x86_64-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AutopaySdk
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import AutopaySdk
import CommonCrypto
import Foundation
import PassKit
import SafariServices
import Security
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
@objc public protocol APBankTransferGridViewDelegate : AutopaySdk.APPaymentMethodViewDelegate {
  @objc func bankTransferPayDidClick(with gateway: AutopaySdk.APGateway, and params: [Swift.String : Swift.String])
}
@objc @objcMembers final public class Autopay : ObjectiveC.NSObject {
  @objc final public class func getSdkVersion() -> Swift.String?
  @objc required public init(config: AutopaySdk.APConfig)
  @objc public static func continueTransaction(transactionCallback: AutopaySdk.APTransactionCallback, url: Swift.String, view: AutopaySdk.APTransactionView) throws
  @objc final public func startTransaction(transactionCallback: AutopaySdk.APTransactionCallback, transactionData: AutopaySdk.APTransactionData, view: AutopaySdk.APTransactionView)
  @objc final public func getGatewayList(gatewayCallback: AutopaySdk.APGatewayListCallback)
  @objc final public func getGatewayList(gatewayCallback: AutopaySdk.APGatewayListCallback, view: AutopaySdk.APGatewayCategoriesView)
  @objc final public func startBlikTransaction(transactionCallback: AutopaySdk.APTransactionCallback, transactionData: AutopaySdk.APTransactionData)
  @objc final public func startBlikTransaction(transactionCallback: AutopaySdk.APTransactionCallback, transactionData: AutopaySdk.APTransactionData, view: AutopaySdk.APBlikView)
  @objc final public func startApplePayTransaction(transactionData: AutopaySdk.APTransactionData, transactionCompletionHandler: @escaping (_ result: AutopaySdk.APResult?, _ error: AutopaySdk.APError?) -> Swift.Void)
  @objc final public func getTransactionStatus(transactionCallback: AutopaySdk.APTransactionCallback, orderId: Swift.String)
  @objc deinit
}
@objc final public class APGlobalTextFieldStyle : ObjectiveC.NSObject {
  @objc public init(defaultTextAttributes: [Foundation.NSAttributedString.Key : Any], layer: AutopaySdk.APLayerStyle)
  @objc deinit
}
@objc public enum APConfigurationError : Swift.Int, Swift.Error {
  case unparsableTokenError
  case authorizationEncryptionError
  case invalidUrlError
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol APTransactionCallback : AutopaySdk.APBaseCallback {
  @objc func transactionDidFinish(with result: AutopaySdk.APResult?)
  @objc func transactionEventDidOccur(_ event: AutopaySdk.APEvent)
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class APError : ObjectiveC.NSObject {
  @objc final public var message: Swift.String? {
    get
  }
  @objc final public let status: AutopaySdk.APErrorEnum
  @objc deinit
}
@objc public enum APErrorEnum : Swift.Int {
  case bankDisabled
  case blockMultipleTransactions
  case blockPaidTransactions
  case insufficientStartAmount
  case outdatedError
  case internalServerError
  case connectionError
  case generalError
  case parsingError
  case emptyGatewaysError
  case invalidCallbackError
  case invalidUrlError
  case notConfirmedError
  case emptyViewError
  case emptyTransactionError
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) final public class APDcbActivationView : AutopaySdk.APBaseDcbView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @objcMembers final public class APConfig : ObjectiveC.NSObject {
  @objc public init(token: Swift.String, serviceId: Swift.Int, acceptorId: Swift.Int, environment: AutopaySdk.APEnvironmentEnum)
  @objc public init(token: Swift.String, serviceId: Swift.Int, acceptorId: Swift.Int, environment: AutopaySdk.APEnvironmentEnum, contextPath: Swift.String)
  @objc final public func update(token: Swift.String)
  @objc final public func setGatewayCurrencies(currencies: [Swift.String])
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class APLog : ObjectiveC.NSObject {
  @objc public static var SHOW_LOG: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc final public class APGlobalStyle : ObjectiveC.NSObject {
  @objc public init(font: UIKit.UIFont, textColor: UIKit.UIColor)
  @objc convenience public init(font: UIKit.UIFont, textColor: UIKit.UIColor, backgroundColor: UIKit.UIColor, cornerRadius: CoreFoundation.CGFloat, size: CoreFoundation.CGSize)
  @objc deinit
}
@objc public protocol APGatewayListCallback : AutopaySdk.APBaseCallback {
  @objc func dataDidReceive(gatewayList: [AutopaySdk.APGateway])
}
@objc public protocol APBaseCallback {
  @objc func errorDidOccur(_ error: AutopaySdk.APError)
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) final public class APBankTransferGridView : AutopaySdk.APGatewayGridView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc public protocol APApplePayViewDelegate : AutopaySdk.APPaymentMethodViewDelegate {
  @objc func applePayDidClick(with gateway: AutopaySdk.APGateway, and params: [Swift.String : Swift.String])
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class APGatewayGridView : AutopaySdk.APPaymentMethodView {
  @objc @_Concurrency.MainActor(unsafe) public var numberOfCellsInRow: Swift.Int
  @objc @_Concurrency.MainActor(unsafe) public var cellHeight: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public var cellBorderColor: CoreGraphics.CGColor?
  @objc @_Concurrency.MainActor(unsafe) public var cellCornerRadius: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public var cellPlaceholder: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) @objc override public var globalTextStyle: AutopaySdk.APGlobalStyle? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var globalMainButtonStyle: AutopaySdk.APGlobalStyle? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override public var globalColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func prepareForInterfaceBuilder()
  @objc @_Concurrency.MainActor(unsafe) public func set(_ gatewayList: [AutopaySdk.APGateway], config: AutopaySdk.APConfig)
  @objc @_Concurrency.MainActor(unsafe) public func set(_ partnerScrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension AutopaySdk.APGatewayGridView : UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
extension AutopaySdk.APGatewayGridView : UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class APBaseView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func prepareForInterfaceBuilder()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class APBaseDcbView : AutopaySdk.APPaymentMethodView {
  @_Concurrency.MainActor(unsafe) @objc override public var globalTextStyle: AutopaySdk.APGlobalStyle? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var globalMainButtonStyle: AutopaySdk.APGlobalStyle? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override public var globalColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public func set(_ gateway: AutopaySdk.APGateway, phoneNumber: Swift.String, config: AutopaySdk.APConfig)
  @_Concurrency.MainActor(unsafe) @objc override public func hideRegulations()
  @_Concurrency.MainActor(unsafe) @objc override public func hideLoadingMode()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class APGateway : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public var gatewayId: Swift.Int {
    get
  }
  @objc final public var gatewayName: Swift.String? {
    get
  }
  @objc final public var gatewayType: AutopaySdk.APGatewayType {
    get
  }
  @objc final public var bankName: Swift.String? {
    get
  }
  @objc final public var iconUrl: Swift.String? {
    get
  }
  @objc final public var state: Swift.String? {
    get
  }
  @objc final public var stateDate: Swift.String? {
    get
  }
  @objc final public var gatewayDescription: Swift.String? {
    get
  }
  final public var inBalanceAllowed: Swift.Bool? {
    get
  }
  @objc final public var currencyList: [AutopaySdk.APCurrency]? {
    get
  }
  required public init(from decoder: Swift.Decoder) throws
  @objc override dynamic public init()
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc final public func theSame(_ object: Any?) -> Swift.Bool
  @objc deinit
}
extension AutopaySdk.APGateway : Foundation.NSCoding {
  @objc convenience dynamic public init?(coder: Foundation.NSCoder)
  @objc final public func encode(with coder: Foundation.NSCoder)
}
@objc public protocol APPaymentMethodViewDelegate {
  @objc optional func didSelect(_ paymentMethodView: AutopaySdk.APPaymentMethodView)
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class APPaymentMethodView : AutopaySdk.APBaseView, AutopaySdk.APBaseCallback {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var activityIndicator: UIKit.UIActivityIndicatorView! {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: AutopaySdk.APPaymentMethodViewDelegate?
  @objc @_Concurrency.MainActor(unsafe) public var contentHeaderTitle: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var borderColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var isContentVisible: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var globalTextStyle: AutopaySdk.APGlobalStyle? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var globalHeaderTextStyle: AutopaySdk.APGlobalStyle? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var regulationTextStyle: AutopaySdk.APGlobalStyle? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var globalColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func prepareForInterfaceBuilder()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) public func hideRegulations()
  @objc @_Concurrency.MainActor(unsafe) public func hideLoadingMode()
  @_Concurrency.MainActor(unsafe) @objc public func errorDidOccur(_ error: AutopaySdk.APError)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class APGatewayCategoryHeader : AutopaySdk.APBaseView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc deinit
}
@objc public protocol APGatewayCategoriesViewDelegate {
  @objc optional func bankTransferPayDidClick(with gateway: AutopaySdk.APGateway, and params: [Swift.String : Swift.String])
  @objc optional func blikPayDidClick(with gateway: AutopaySdk.APGateway, and params: [Swift.String : Swift.String])
  @objc optional func applePayDidClick(with gateway: AutopaySdk.APGateway, and params: [Swift.String : Swift.String])
  @objc optional func paymentCardPayDidClick(with gateway: AutopaySdk.APGateway, and params: [Swift.String : Swift.String])
  @objc optional func dcbPayDidClick(with gateway: AutopaySdk.APGateway, and params: [Swift.String : Swift.String])
  @objc optional func categoryDidSelect(with gatewayType: AutopaySdk.APGatewayType)
  @objc optional func categoryDidDeselect()
}
@objc @_inheritsConvenienceInitializers public class APRequestData : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers final public class APTransactionData : AutopaySdk.APRequestData {
  @objc public init(amount: Swift.String)
  @objc convenience public init(amount: Swift.String, with orderId: Swift.String)
  @objc final public func getOrderId() -> Swift.String
  @objc final public func getParams() -> [Swift.String : Swift.String]
  @objc final public func setCustomerEmail(_ customerEmail: Swift.String)
  @objc final public func setCustomerPhone(_ customerPhone: Swift.String)
  @objc final public func setGatewayId(_ gatewayId: Swift.Int)
  @objc final public func setRecurringAction(_ recurringAction: AutopaySdk.APRecurringActionEnum)
  @objc final public func setRecurringAcceptanceState(_ recurringAcceptanceState: AutopaySdk.APRecurringAcceptanceStateEnum)
  @objc final public func addParams(_ customParams: [Swift.String : Swift.String])
  @objc final public func addParam(value: Swift.String, key: Swift.String)
  @objc final public func setProductList(_ products: AutopaySdk.APProductList)
  @objc final public func setApplePayPaymentToken(_ paymentToken: PassKit.PKPaymentToken)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) final public class APBlikView : AutopaySdk.APPaymentMethodView {
  @objc @_Concurrency.MainActor(unsafe) final public var codeFontSize: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public var codeTextColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public var codeActiveBorderColor: CoreGraphics.CGColor?
  @objc @_Concurrency.MainActor(unsafe) final public var codeInactiveBorderColor: CoreGraphics.CGColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public var loaderHeaderTitle: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public var loaderHeaderColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var globalTextStyle: AutopaySdk.APGlobalStyle? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public var globalTextFieldStyle: AutopaySdk.APGlobalTextFieldStyle? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public var globalMainButtonStyle: AutopaySdk.APGlobalStyle? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var globalColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override final public func prepareForInterfaceBuilder()
  @objc @_Concurrency.MainActor(unsafe) final public func set(_ gateway: AutopaySdk.APGateway, config: AutopaySdk.APConfig)
  @_Concurrency.MainActor(unsafe) @objc override final public func hideLoadingMode()
  @_Concurrency.MainActor(unsafe) @objc override final public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class APWebView : WebKit.WKWebView, UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc public func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func willMove(toSuperview newSuperview: UIKit.UIView?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func load(_ request: Foundation.URLRequest) -> WebKit.WKNavigation?
  @objc deinit
}
@objc public protocol APBlikViewDelegate {
  @objc func blikPayDidClick(with gateway: AutopaySdk.APGateway, and params: [Swift.String : Swift.String])
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) final public class APPaymentCardActivationView : AutopaySdk.APBasePaymentCardView {
  @objc @_Concurrency.MainActor(unsafe) final public var activationText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public var activationTextStyle: AutopaySdk.APGlobalStyle? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public func set(_ gateway: AutopaySdk.APGateway, config: AutopaySdk.APConfig)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc public protocol APDcbViewDelegate : AutopaySdk.APPaymentMethodViewDelegate {
  @objc func dcbPayDidClick(with gateway: AutopaySdk.APGateway, and params: [Swift.String : Swift.String])
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) final public class APGatewayCategoriesView : AutopaySdk.APBaseView {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak final public var blikView: AutopaySdk.APBlikView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak final public var bankTransferGridView: AutopaySdk.APBankTransferGridView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak final public var paymentCardView: AutopaySdk.APPaymentCardView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak final public var dcbView: AutopaySdk.APBaseDcbView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak final public var applePayView: AutopaySdk.APApplePayView!
  @objc @_Concurrency.MainActor(unsafe) weak final public var delegate: AutopaySdk.APGatewayCategoriesViewDelegate?
  @objc @_Concurrency.MainActor(unsafe) final public var borderColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public var globalTextStyle: AutopaySdk.APGlobalStyle? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public var globalHeaderTextStyle: AutopaySdk.APGlobalStyle? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public var globalRegulationTextStyle: AutopaySdk.APGlobalStyle? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public var globalTextFieldStyle: AutopaySdk.APGlobalTextFieldStyle? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public var globalMainButtonStyle: AutopaySdk.APGlobalStyle? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public var globalBackButtonStyle: AutopaySdk.APGlobalStyle? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public var globalColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override final public func prepareForInterfaceBuilder()
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) final public func setData(_ gatewayList: [AutopaySdk.APGateway], config: AutopaySdk.APConfig)
  @objc @_Concurrency.MainActor(unsafe) final public func resetAllViews()
  @objc deinit
}
extension AutopaySdk.APGatewayCategoriesView : AutopaySdk.APBlikViewDelegate, AutopaySdk.APBankTransferGridViewDelegate, AutopaySdk.APPaymentCardViewDelegate, AutopaySdk.APApplePayViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func blikPayDidClick(with gateway: AutopaySdk.APGateway, and params: [Swift.String : Swift.String])
  @_Concurrency.MainActor(unsafe) @objc final public func bankTransferPayDidClick(with gateway: AutopaySdk.APGateway, and params: [Swift.String : Swift.String])
  @_Concurrency.MainActor(unsafe) @objc final public func paymentCardPayDidClick(with gateway: AutopaySdk.APGateway, and params: [Swift.String : Swift.String])
  @_Concurrency.MainActor(unsafe) @objc final public func applePayDidClick(with gateway: AutopaySdk.APGateway, and params: [Swift.String : Swift.String])
  @_Concurrency.MainActor(unsafe) @objc final public func didSelect(_ paymentMethodView: AutopaySdk.APPaymentMethodView)
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) final public class APPaymentCardView : AutopaySdk.APBasePaymentCardView {
  @objc @_Concurrency.MainActor(unsafe) final public func set(_ gateways: [AutopaySdk.APGateway], config: AutopaySdk.APConfig)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @objcMembers final public class APProduct : ObjectiveC.NSObject {
  @objc public init(subAmount: Swift.String, params: [AutopaySdk.APParam])
  @objc convenience public init(subAmount: Swift.String, param: AutopaySdk.APParam)
  @objc final public func addParam(_ param: AutopaySdk.APParam)
  @objc deinit
}
@objc @objcMembers final public class APParam : ObjectiveC.NSObject {
  @objc public init(name: Swift.String, value: Swift.String)
  @objc convenience public init(name: Swift.String, value: Swift.String, additionalAttributes: [Swift.String : Swift.String])
  @objc final public func addAdditionalAttribute(key: Swift.String, value: Swift.String)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class APResult : ObjectiveC.NSObject {
  @objc final public let status: AutopaySdk.APResultEnum
  @objc deinit
}
@objc public enum APResultEnum : Swift.Int {
  case success
  case successMany
  case pending
  case failure
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum APGatewayType : Swift.Int, Swift.RawRepresentable {
  case blik
  case autoPaymentBlik
  case pbl
  case fastTransaction
  case card
  case autoPaymentCard
  case installments
  case pis
  case ais
  case otp
  case masterPass
  case googlePay
  case visaCheckout
  case applePay
  case bankTransfer
  case autoPaymentDcb
  case undefined
  public typealias RawValue = Swift.String
  public var rawValue: AutopaySdk.APGatewayType.RawValue {
    get
  }
  public init?(rawValue: AutopaySdk.APGatewayType.RawValue)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class APTransactionView : AutopaySdk.APBaseView {
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override final public func prepareForInterfaceBuilder()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class APLayerStyle : ObjectiveC.NSObject {
  @objc final public var backgroundColor: CoreGraphics.CGColor?
  @objc final public var cornerRadius: CoreFoundation.CGFloat
  @objc final public var borderWidth: CoreFoundation.CGFloat
  @objc final public var borderColor: CoreGraphics.CGColor?
  @objc final public var opacity: Swift.Float
  @objc final public var shadowColor: CoreGraphics.CGColor?
  @objc final public var shadowOpacity: Swift.Float
  @objc final public var shadowOffset: CoreFoundation.CGSize
  @objc final public var shadowRadius: CoreFoundation.CGFloat
  @objc final public var shadowPath: CoreGraphics.CGPath?
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers final public class APProductList : ObjectiveC.NSObject {
  @objc public init(productList: [AutopaySdk.APProduct])
  @objc convenience public init(product: AutopaySdk.APProduct)
  @objc final public func addProduct(product: AutopaySdk.APProduct)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class APBasePaymentCardView : AutopaySdk.APPaymentMethodView {
  @_Concurrency.MainActor(unsafe) @objc override public var globalTextStyle: AutopaySdk.APGlobalStyle? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var inputLabelTextStyle: AutopaySdk.APGlobalStyle? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var globalTextFieldStyle: AutopaySdk.APGlobalTextFieldStyle? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var globalMainButtonStyle: AutopaySdk.APGlobalStyle? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override public var globalColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var leftMarginLabels: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var leftMarginTextFields: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var isNameSectionVisible: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override public func hideLoadingMode()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension AutopaySdk.APBasePaymentCardView : Swift.CustomReflectable {
  @_Concurrency.MainActor(unsafe) public var customMirror: Swift.Mirror {
    get
  }
}
@objc public enum APRecurringActionEnum : Swift.Int, Swift.RawRepresentable {
  case initWithPayment
  case initWithRefund
  case auto
  case deactivate
  case unknown
  public typealias RawValue = Swift.String
  public var rawValue: AutopaySdk.APRecurringActionEnum.RawValue {
    get
  }
  public init?(rawValue: AutopaySdk.APRecurringActionEnum.RawValue)
}
@objc public enum APRecurringAcceptanceStateEnum : Swift.Int, Swift.RawRepresentable {
  case accepted
  case notApplicable
  case force
  case unknown
  public typealias RawValue = Swift.String
  public var rawValue: AutopaySdk.APRecurringAcceptanceStateEnum.RawValue {
    get
  }
  public init?(rawValue: AutopaySdk.APRecurringAcceptanceStateEnum.RawValue)
}
public protocol HttpCallback {
  func handleResponse(_ responseData: Foundation.Data)
  func handleError(_ error: AutopaySdk.APError)
}
@objc @objcMembers final public class APCurrency : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public var currency: Swift.String? {
    get
  }
  required public init(from decoder: Swift.Decoder) throws
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class APApplePayView : AutopaySdk.APPaymentMethodView {
  @objc @_Concurrency.MainActor(unsafe) public var globalBackButtonStyle: AutopaySdk.APGlobalStyle? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var globalMainButtonStyle: AutopaySdk.APGlobalStyle? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func prepareForInterfaceBuilder()
  @objc @_Concurrency.MainActor(unsafe) public func set(_ gateway: AutopaySdk.APGateway, config: AutopaySdk.APConfig)
  @_Concurrency.MainActor(unsafe) @objc override public func hideRegulations()
  @_Concurrency.MainActor(unsafe) @objc override public func errorDidOccur(_ error: AutopaySdk.APError)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc public protocol APPaymentCardViewDelegate : AutopaySdk.APPaymentMethodViewDelegate {
  @objc func paymentCardPayDidClick(with gateway: AutopaySdk.APGateway, and params: [Swift.String : Swift.String])
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class APEvent : ObjectiveC.NSObject {
  @objc final public let status: AutopaySdk.APEventEnum
  @objc deinit
}
@objc public enum APEventEnum : Swift.Int {
  case pageLoaded
  case contentLoaded
  case canceled
  case laterClick
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum APEnvironmentEnum : Swift.Int, Swift.RawRepresentable {
  case prod
  case dev
  public typealias RawValue = Swift.String
  public var rawValue: AutopaySdk.APEnvironmentEnum.RawValue {
    get
  }
  public init?(rawValue: AutopaySdk.APEnvironmentEnum.RawValue)
}
extension AutopaySdk.APConfigurationError : Swift.Equatable {}
extension AutopaySdk.APConfigurationError : Swift.Hashable {}
extension AutopaySdk.APConfigurationError : Swift.RawRepresentable {}
extension AutopaySdk.APErrorEnum : Swift.Equatable {}
extension AutopaySdk.APErrorEnum : Swift.Hashable {}
extension AutopaySdk.APErrorEnum : Swift.RawRepresentable {}
extension AutopaySdk.APResultEnum : Swift.Equatable {}
extension AutopaySdk.APResultEnum : Swift.Hashable {}
extension AutopaySdk.APResultEnum : Swift.RawRepresentable {}
extension AutopaySdk.APGatewayType : Swift.Equatable {}
extension AutopaySdk.APGatewayType : Swift.Hashable {}
extension AutopaySdk.APRecurringActionEnum : Swift.Equatable {}
extension AutopaySdk.APRecurringActionEnum : Swift.Hashable {}
extension AutopaySdk.APRecurringAcceptanceStateEnum : Swift.Equatable {}
extension AutopaySdk.APRecurringAcceptanceStateEnum : Swift.Hashable {}
extension AutopaySdk.APEventEnum : Swift.Equatable {}
extension AutopaySdk.APEventEnum : Swift.Hashable {}
extension AutopaySdk.APEventEnum : Swift.RawRepresentable {}
extension AutopaySdk.APEnvironmentEnum : Swift.Equatable {}
extension AutopaySdk.APEnvironmentEnum : Swift.Hashable {}
